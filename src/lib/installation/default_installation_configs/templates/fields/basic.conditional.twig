<form method="post" class="form">
    <input type="hidden" name="type" value="{{ field.type }}">
    <div class="field-wrapper">
        <!-- Field Label and Name -->
        <div class="form-group">
            <label for="field-name">Label</label>
            <input value="{{ content.label }}" type="text" name="title" id="field-name" class="form-control" placeholder="Enter field label">
        </div>

        <!-- Field Settings -->
        <fieldset class="form-control">
            <legend>Field Settings</legend>

            <div class="form-group">
                <label for="class">Css Classes (optional)</label>
                <input value="{{ content.class|join(' ') }}" type="text" name="class" id="class" class="form-control">
                <small>Separate classes with a space</small>
            </div>
            <div class="form-group">
                <label for="default-value">Html ID (optional)</label>
                <input value="{{ content.id }}" type="text" name="id" id="default-value" class="form-control">
            </div>
        </fieldset>

        {% if content.inner_field %}

            <fieldset class="option-wrapper">
                <legend>{{ field.title }} Inner Fields</legend>
                <div class="inner-collection">

                    {% if content.inner_field %}

                        {% for inner in content.inner_field %}

                            {% set inner_type = inner.type %}
                            {% set index = loop.index %}

                            {% if inner_type %}

                                {% if inner_type == 'textarea' %}

                                    {% if 'editor' in inner.class %}
                                        {% set inner_type = 'ck_editor' %}
                                    {% else %}
                                        {% set inner_type = 'simple_textarea' %}
                                    {% endif %}

                                {% endif %}

                                <div class="form-group old-inner-field">
                                    <label>Type</label>
                                    <select name="inner_type[]" class="form-control inner-field-type">
                                        <option value="">Select type</option>
                                        {% for info in fields %}

                                            {% if inner_type == info.type %}

                                                <option value="{{ info.type }}" selected>{{ info.type }}</option>

                                            {% else %}

                                                <option value="{{ info.type }}">{{ info.type }}</option>

                                            {% endif %}
                                        {% endfor %}
                                    </select>
                                    <details>
                                        {{ get_field_type_info(inner_type, index, inner)|raw }}
                                    </details>
                                    <input type="hidden" name="name_{{ index - 1 }}" value="{{ inner.name }}">
                                    <a href="#" class="remove d-none">Remove field</a>
                                </div>
                            {% endif %}

                        {% endfor %}

                    {% else %}

                        <div class="form-group old-inner-field">
                            <label>Type</label>
                            <select name="inner_type[]" class="form-control inner-field-type">
                                <option value="">Select type</option>
                                {% for info in fields %}

                                    {% if inner_type == info.type %}

                                        <option value="{{ info.type }}" selected>{{ info.type }}</option>

                                    {% else %}

                                        <option value="{{ info.type }}">{{ info.type }}</option>

                                    {% endif %}
                                {% endfor %}
                            </select>
                            <details>
                                {{ get_field_type_info(inner_type, index, inner)|raw }}
                            </details>
                            <a href="#" class="remove d-none">Remove field</a>
                        </div>

                    {% endif %}
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary w-auto add-inner">Add field</button>
                </div>
            </fieldset>

        {% else %}

            <fieldset class="option-wrapper">
                <legend>{{ field.title }} Inner Fields</legend>
                <div class="inner-collection">
                    <div class="form-group">
                        <label>Type</label>
                        <select name="inner_type[]" class="form-control inner-field-type">
                            <option value="">Select type</option>
                            {% for info in fields %}
                                <option value="{{ info.type }}">{{ info.type }}</option>
                            {% endfor %}
                        </select>
                        <details></details>
                        <a href="#" class="remove d-none">Remove field</a>
                    </div>
                </div>
                <div class="form-group">
                    <button type="button" class="btn btn-primary w-auto add-inner">Add field</button>
                </div>
            </fieldset>

        {% endif %}

        <div class="form-group">
            <button type="submit" class="btn btn-primary w-25">Save</button>
        </div>
    </div>
</form>
<noscript id="inner-field-supported">{{ html|json_encode|raw }}</noscript>
<noscript id="inner-count">{{ content.inner_field|length }}</noscript>
<script>
    (function($) {
        $(document).ready(function(){
            let innerFieldSupported = $('#inner-field-supported').text();
            innerFieldSupported = JSON.parse(innerFieldSupported);
            const fields = new Set();

            setInterval(()=>{
                $(".inner-field-type").off('change').on('change', function(e){
                    e.preventDefault();
                    const selected = $(this).val();
                    const html = innerFieldSupported[selected] || '';

                    if (html) {
                        const html_obj = $(html);

                        // Get the <form> element inside the html_obj
                        const form = html_obj.is('form') ? html_obj : html_obj.find('form');

                        if (form.length) {
                            // Remove submit buttons inside the form
                            form.find('input[type="submit"]').remove();

                            // Update all name attributes to use array syntax
                            form.find('[name]').each(function() {
                                let originalName = $(this).attr('name');
                                if (originalName && !originalName.endsWith('[]')) {
                                    $(this).attr('name', 'inner_'+originalName + '_'+ $("#inner-count").text());
                                }else {
                                    originalName = originalName.replace('[]', '').trim();
                                    console.log(originalName);
                                    $(this).attr('name', 'inner_'+originalName + '_'+ $("#inner-count").text()+ '[]');
                                }
                            });

                            // Get only the inner HTML of the form
                            const formInnerHtml = form.html();

                            // Find and populate <details> with form inner HTML
                            const details = $(this).parent().find('details');
                            if (details.length) {
                                details.html(formInnerHtml);
                                details.show();
                            }
                        }
                    }
                });
            }, 1000);

            function cleanString(str) {
                return str
                    .replace(/[^a-zA-Z0-9]/g, '_')
                    .replace(/_+/g, '_')
                    .replace(/^_+|_+$/g, '');
            }

            const it = setInterval(()=>{
                const count = parseInt($('#inner-count').text());
                for (let i = 0; i <= count; i++) {
                    const title = $(`input[name='inner_title_${i}']`);
                    let value = null;
                    if (title.length) {
                        value = title.val()
                    }
                    if (value) {
                        const label = value;
                        value = cleanString(value).toLowerCase();
                        const entity_name = location.href.split('/')[6] || null;
                        if (entity_name) {
                            const field_name = `${entity_name}_field_${value}`;
                            if (!fields.has(field_name)) {
                                fields.add(field_name);
                                $(".trigger").append(`<option value="${field_name}">${label}</option>`);
                                $(".controlled").append(`<option value="${field_name}">${label}</option>`);
                            }
                        }
                    }
                }
            },3000);

            let optionsWrapper = $('.option-wrapper');
            if (optionsWrapper) {
                optionsWrapper.find('.add-inner').off('click').on('click', function(e){
                    const collections = optionsWrapper.find('.inner-collection');
                    const clone = collections.find('.form-group').first().clone();
                    const count = parseInt($('#inner-count').text())  + 1;
                    clone.find('input').val('');
                    collections.append(clone);
                    $('#inner-count').text(count.toString());
                    clone.find('a').removeClass('d-none')
                    clone.find('a').on('click', function(e){
                        e.preventDefault();
                        $(this).parent().remove();
                        $('#inner-count').text((count - 1).toString());
                    })

                })
            }

            if ($(".add-conditional").length) {
                const addConditional = $(".add-conditional");
                addConditional.off("click").on("click", function(e){
                    const conditionWrapper = $(this).parent().parent().find('.conditional-logic').first().clone();
                    if (conditionWrapper.length) {
                        $(this).parent().parent().find('.conditional-logic').first().parent().append(conditionWrapper)
                    }
                })
            }

            const old_fields = $('.inner-collection');
            if (old_fields) {
                old_fields.find('.old-inner-field').each(function(index, element){
                    const html = $(element).find('details');
                    if (html) {
                        const html_obj = $(html);

                        if (html_obj.length > 0 && html_obj.is('details')) {
                            // Get the <form> element inside the html_obj
                            const form = html_obj.find('form').length ? html_obj.find('form') : html_obj;

                            if (form.length) {
                                // Remove submit buttons inside the form
                                form.find('input[type="submit"]').remove();

                                // Update all name attributes to use array syntax
                                form.find('[name]').each(function() {
                                    let originalName = $(this).attr('name');
                                    if (originalName && !originalName.endsWith('[]')) {
                                        $(this).attr('name', 'inner_'+originalName + '_'+ index);
                                    }else {
                                        originalName = originalName.replace('[]', '').trim();
                                        $(this).attr('name', 'inner_'+originalName + '_'+ index+ '[]');
                                    }
                                });

                                // Get only the inner HTML of the form
                                const formInnerHtml = form.html();

                                // Find and populate <details> with form inner HTML
                                html_obj.html(formInnerHtml);
                                html_obj.show();
                            }
                        }

                    }
                });
            }

        });
    })(jQuery);

</script>