<?php

namespace Simp\Core\modules\user\trait;

use PDO;
use Phpfastcache\Exceptions\PhpfastcacheCoreException;
use Phpfastcache\Exceptions\PhpfastcacheDriverException;
use Phpfastcache\Exceptions\PhpfastcacheInvalidArgumentException;
use Phpfastcache\Exceptions\PhpfastcacheLogicException;
use Simp\Core\lib\memory\session\Session;
use Simp\Core\modules\config\ConfigManager;
use Simp\Core\modules\database\Database;
use stdClass;
use Symfony\Component\HttpFoundation\Request;

trait StaticHelperTrait
{
    /**
     * @param string $table_name Table to be use for calculations.
     * @param int $limit Limit to use for offset calculation.
     * @return array
     */
    public static function filters(string $table_name, int $limit = 10): array
    {
        $query = "SHOW COLUMNS FROM $table_name";
        $query = Database::database()->con()->prepare($query);
        $query->execute();
        $result = $query->fetchAll(PDO::FETCH_ASSOC);
        $filters = array();
        if (!empty($result)) {
            $columns = array_column($result, 'Field');
            $filters['order_by'] = $columns;
        }
        $query = "SELECT COUNT(*) FROM $table_name";
        $query = Database::database()->con()->prepare($query);
        $query->execute();
        $filters['total_rows'] = $query->fetchColumn();
        if ($limit > 0 && $filters['total_rows'] > $limit) {
            $filters['offset'] = $filters['total_rows'] / $limit;
        }
        else {
            $filters['offset'] = 0;
        }
        return $filters;
    }

    /**
     * @param string $table_name Table in table to be used.
     * @param string $search_field which field to search by in table given.
     * @param int $search_type Search typ 1 for contains, 2 for start with, 3 for end with.
     * @param string $sort_by List of column names to sort by
     * @param string $order_by DESC or ASC
     * @param string|null $search_q Search text
     * @param int $limit Total rows
     * @param int $offset From what set.
     * @return array
     */
    public static function all(string $table_name, string $search_field, int $search_type = 1, string $sort_by ='created', string $order_by = 'DESC',
                               ?string $search_q = null, int $limit = 10, int $offset = 0): array
    {
        $query = "SELECT * FROM `$table_name` ORDER BY `$sort_by` $order_by LIMIT :limit OFFSET :offset";
        if (!empty($search_q)) {

            if ($search_type == 1) {
                $search_q = "%$search_q%";
            }
            elseif ($search_type == 2) {
                $search_q = "%$search_q";
            }
            elseif ($search_type == 3) {
                $search_q = "$search_q%";
            }
         $query = "SELECT * FROM `$table_name` WHERE $search_field LIKE '%$search_q%' ORDER BY `$sort_by` $order_by LIMIT :limit OFFSET :offset";
        }

        $query = Database::database()->con()->prepare($query);
        $query->bindParam(':limit', $limit, PDO::PARAM_INT);
        $query->bindParam(':offset', $offset, PDO::PARAM_INT);
        $query->execute();
        return $query->fetchAll(PDO::FETCH_ASSOC);
    }

    /**
     * @param string $handle_class Any class that uses the trait StaticHelperTrait will work.
     * @param string $table_name Where in database to search data.
     * @param array $filters Data that is generated by @method StaticHelperTrait::filters
     * @param Request $request
     * @param string $mapper_class Class which you want data to be mapped into
     * @return object
     */
    public static function parseFilter(string $handle_class, string $table_name, array $filters, Request $request, string $mapper_class = StdClass::class): mixed
    {
        $default_field = reset($filters['order_by']);
        $offset = $request->get('page', 0);
        $offset = empty($offset) ? 0 : $offset;

        $sort_by = $request->get('sort_by', 'created');
        $sort_by = empty($sort_by) ? 'created' : $sort_by;

        $order_by = $request->get('order_by', 'DESC');
        $order_by = empty($order_by) ? 'DESC' : $order_by;

        $limit = $request->get('limit', 10);
        $limit = empty($limit) ? 10 : $limit;

        $search_query = $request->get('search', null);
        $search_query = empty($search_query) ? null : $search_query;

        $search_type = $request->get('search_type', 1);
        $search_type = empty($search_type) ? 1 : $search_type;

        $search_field = $request->get('search_by', $default_field);
        $search_field = empty($search_field) ? $default_field : $search_field;

        $results = $handle_class::all($table_name,$search_field,$search_type,$sort_by,$order_by,$search_query,$limit,$offset);
        return array_map(fn($item) => new $mapper_class(...$item), $results);
    }

    /**
     * @param string $table_name where do you want to delete the data in database.
     * @param string $by_column Using which column.
     * @param mixed $by_value By what value in column.
     * @return bool
     * @throws PhpfastcacheCoreException
     * @throws PhpfastcacheDriverException
     * @throws PhpfastcacheInvalidArgumentException
     * @throws PhpfastcacheLogicException
     */
    public static function dataDeletion(string $table_name, string $by_column, mixed $by_value): bool
    {
        // Make sure deletion action is confirmed in session.
        if (Session::init()->get('system.deletion.confirmation') === 'yes') {
            $query = "DELETE FROM `$table_name` WHERE `$by_column` = :by_value";
            $query = Database::database()->con()->prepare($query);
            $query->bindParam(':by_value', $by_value);
            $query->execute();
            Session::init()->delete('system.deletion.confirmation');
            return true;
        }
        return false;
    }

    public static function addUserRole(string $role_name, int $uid): bool
    {
        $query = "INSERT INTO `user_roles` (name, role_name, role_label, uid) VALUES (:name, :role_name, :role_label, :uid)";
        $query = Database::database()->con()->prepare($query);
        $query->bindParam(':name', $role_name);
        $query->bindParam(':role_name', $role_name);
        $query->bindParam(':uid', $uid);
        $query->bindParam(':role_label', $role_name);
        return $query->execute();
    }

    public static function checkPasswordStrength($password): string
    {
        $score = 0;

        // Check length
        if (strlen($password) >= 8) {
            $score++;
        }
        if (strlen($password) >= 12) {
            $score++;
        }

        // Check for uppercase letters
        if (preg_match('/[A-Z]/', $password)) {
            $score++;
        }

        // Check for lowercase letters
        if (preg_match('/[a-z]/', $password)) {
            $score++;
        }

        // Check for numbers
        if (preg_match('/\d/', $password)) {
            $score++;
        }

        // Check for special characters
        if (preg_match('/[\W]/', $password)) {
            $score++;
        }

        // Categorize password strength
        if ($score <= 2) {
            return "Low";
        } elseif ($score <= 4) {
            return "Medium";
        } else {
            return "Strong";
        }
    }

}